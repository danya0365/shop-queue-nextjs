"use client";

import Link from "next/link";
import { useState } from "react";

interface SetupStep {
  id: string;
  title: string;
  description: string;
  icon: string;
  status: "completed" | "pending" | "optional";
  link: string;
  priority: "high" | "medium" | "low";
  estimatedTime: string;
}

interface ShopSetupTutorialProps {
  shopId: string;
  setupProgress: {
    hasBasicInfo: boolean;
    hasSettings: boolean;
    hasOpeningHours: boolean;
    hasServices: boolean;
    hasEmployees: boolean;
    hasDepartments: boolean;
    servicesCount: number;
    employeesCount: number;
    departmentsCount: number;
  };
}

export function ShopSetupTutorial({
  shopId,
  setupProgress,
}: ShopSetupTutorialProps) {
  const [isExpanded, setIsExpanded] = useState(true);

  // Calculate setup steps based on current progress
  const setupSteps: SetupStep[] = [
    {
      id: "basic-info",
      title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏ô",
      description: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠",
      icon: "üè™",
      status: setupProgress.hasBasicInfo ? "completed" : "pending",
      link: `/shop/${shopId}/backend/settings`,
      priority: "high",
      estimatedTime: "5 ‡∏ô‡∏≤‡∏ó‡∏µ",
    },
    {
      id: "shop-settings",
      title: "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô",
      description: "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß",
      icon: "‚öôÔ∏è",
      status: setupProgress.hasSettings ? "completed" : "pending",
      link: `/shop/${shopId}/backend/settings`,
      priority: "high",
      estimatedTime: "10 ‡∏ô‡∏≤‡∏ó‡∏µ",
    },
    {
      id: "opening-hours",
      title: "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£",
      description: "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
      icon: "üïê",
      status: setupProgress.hasOpeningHours ? "completed" : "pending",
      link: `/shop/${shopId}/backend/opening-hours`,
      priority: "high",
      estimatedTime: "5 ‡∏ô‡∏≤‡∏ó‡∏µ",
    },
    {
      id: "services",
      title: "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
      description: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${setupProgress.servicesCount} ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£)`,
      icon: "üîß",
      status: setupProgress.hasServices ? "completed" : "pending",
      link: `/shop/${shopId}/backend/services`,
      priority: "high",
      estimatedTime: "15 ‡∏ô‡∏≤‡∏ó‡∏µ",
    },
    {
      id: "employees",
      title: "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô",
      description: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${setupProgress.employeesCount} ‡∏Ñ‡∏ô)`,
      icon: "üë•",
      status: setupProgress.hasEmployees ? "completed" : "pending",
      link: `/shop/${shopId}/backend/employees`,
      priority: "high",
      estimatedTime: "10 ‡∏ô‡∏≤‡∏ó‡∏µ",
    },
    {
      id: "departments",
      title: "‡πÅ‡∏ú‡∏ô‡∏Å (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)",
      description: `‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏á‡∏≤‡∏ô (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${setupProgress.departmentsCount} ‡πÅ‡∏ú‡∏ô‡∏Å)`,
      icon: "üè¢",
      status: setupProgress.hasDepartments ? "completed" : "optional",
      link: `/shop/${shopId}/backend/departments`,
      priority: "low",
      estimatedTime: "5 ‡∏ô‡∏≤‡∏ó‡∏µ",
    },
  ];

  // Calculate completion percentage
  const requiredSteps = setupSteps.filter((step) => step.priority === "high");
  const completedRequiredSteps = requiredSteps.filter(
    (step) => step.status === "completed"
  );
  const completionPercentage = Math.round(
    (completedRequiredSteps.length / requiredSteps.length) * 100
  );

  // Check if shop is ready for queues
  const isQueueReady = completedRequiredSteps.length === requiredSteps.length;

  // Get next step to complete
  const nextStep = setupSteps.find(
    (step) => step.status === "pending" && step.priority === "high"
  );

  if (!isExpanded) {
    return (
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl border border-blue-200 dark:border-blue-800 p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="flex-shrink-0">
              {isQueueReady ? (
                <div className="w-10 h-10 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center">
                  <span className="text-green-600 dark:text-green-400 text-xl">
                    ‚úÖ
                  </span>
                </div>
              ) : (
                <div className="w-10 h-10 bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center">
                  <span className="text-blue-600 dark:text-blue-400 text-xl">
                    üöÄ
                  </span>
                </div>
              )}
            </div>
            <div>
              <h3 className="font-semibold text-gray-900 dark:text-gray-100">
                {isQueueReady ? "‡∏£‡πâ‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß!" : "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô"}
              </h3>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {isQueueReady
                  ? "‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß"
                  : `‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ${completionPercentage}% (${completedRequiredSteps.length}/${requiredSteps.length} ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô)`}
              </p>
            </div>
          </div>
          <button
            onClick={() => setIsExpanded(true)}
            className="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium text-sm"
          >
            ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‚Üí
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl border border-blue-200 dark:border-blue-800">
      {/* Header */}
      <div className="p-6 border-b border-blue-200 dark:border-blue-800">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="flex-shrink-0">
              {isQueueReady ? (
                <div className="w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center">
                  <span className="text-green-600 dark:text-green-400 text-2xl">
                    ‚úÖ
                  </span>
                </div>
              ) : (
                <div className="w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center">
                  <span className="text-blue-600 dark:text-blue-400 text-2xl">
                    üöÄ
                  </span>
                </div>
              )}
            </div>
            <div>
              <h2 className="text-xl font-bold text-gray-900 dark:text-gray-100">
                {isQueueReady
                  ? "üéâ ‡∏£‡πâ‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß!"
                  : "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß"}
              </h2>
              <p className="text-gray-600 dark:text-gray-400">
                {isQueueReady
                  ? "‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!"
                  : "‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡πâ‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"}
              </p>
            </div>
          </div>
          <button
            onClick={() => setIsExpanded(false)}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
          >
            <svg
              className="w-5 h-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        </div>

        {/* Progress Bar */}
        {!isQueueReady && (
          <div className="mt-4">
            <div className="flex items-center justify-between text-sm text-gray-600 dark:text-gray-400 mb-2">
              <span>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</span>
              <span>{completionPercentage}%</span>
            </div>
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
              <div
                className="bg-gradient-to-r from-blue-500 to-indigo-500 h-2 rounded-full transition-all duration-300"
                style={{ width: `${completionPercentage}%` }}
              ></div>
            </div>
          </div>
        )}
      </div>

      {/* Content */}
      <div className="p-6">
        {isQueueReady ? (
          /* Success State */
          <div className="text-center py-8">
            <div className="text-6xl mb-4">üéä</div>
            <h3 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">
              ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏£‡πâ‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß
            </h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              ‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ
            </p>
            <div className="flex justify-center space-x-4">
              <Link
                href={`/shop/${shopId}/queue`}
                className="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg font-medium transition-colors"
              >
                üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß
              </Link>
              <Link
                href={`/shop/${shopId}/backend/queue`}
                className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg font-medium transition-colors"
              >
                üìã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß
              </Link>
            </div>
          </div>
        ) : (
          /* Setup Steps */
          <div className="space-y-4">
            {/* Next Step Highlight */}
            {nextStep && (
              <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 mb-6">
                <div className="flex items-center space-x-3">
                  <span className="text-2xl">{nextStep.icon}</span>
                  <div className="flex-1">
                    <h4 className="font-semibold text-yellow-800 dark:text-yellow-200">
                      ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: {nextStep.title}
                    </h4>
                    <p className="text-sm text-yellow-700 dark:text-yellow-300">
                      {nextStep.description}
                    </p>
                  </div>
                  <Link
                    href={nextStep.link}
                    className="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-lg font-medium transition-colors text-sm"
                  >
                    ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                  </Link>
                </div>
              </div>
            )}

            {/* All Steps */}
            <div className="grid gap-4">
              {setupSteps.map((step, index) => (
                <div
                  key={step.id}
                  className={`flex items-center space-x-4 p-4 rounded-lg border transition-all ${
                    step.status === "completed"
                      ? "bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800"
                      : step.status === "pending"
                      ? "bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600"
                      : "bg-gray-50 dark:bg-gray-800/50 border-gray-200 dark:border-gray-700"
                  }`}
                >
                  {/* Step Number & Icon */}
                  <div className="flex-shrink-0 flex items-center space-x-3">
                    <div
                      className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                        step.status === "completed"
                          ? "bg-green-500 text-white"
                          : step.status === "pending"
                          ? "bg-blue-500 text-white"
                          : "bg-gray-300 dark:bg-gray-600 text-gray-600 dark:text-gray-300"
                      }`}
                    >
                      {step.status === "completed" ? "‚úì" : index + 1}
                    </div>
                    <span className="text-2xl">{step.icon}</span>
                  </div>

                  {/* Step Content */}
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-1">
                      <h4 className="font-semibold text-gray-900 dark:text-gray-100">
                        {step.title}
                      </h4>
                      {step.priority === "high" && (
                        <span className="bg-red-100 dark:bg-red-900/30 text-red-600 dark:text-red-400 text-xs px-2 py-1 rounded-full font-medium">
                          ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                        </span>
                      )}
                      {step.status === "optional" && (
                        <span className="bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 text-xs px-2 py-1 rounded-full font-medium">
                          ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö
                        </span>
                      )}
                    </div>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                      {step.description}
                    </p>
                    <div className="flex items-center space-x-4 text-xs text-gray-500 dark:text-gray-400">
                      <span>‚è±Ô∏è {step.estimatedTime}</span>
                      {step.status === "completed" && (
                        <span className="text-green-600 dark:text-green-400">
                          ‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                        </span>
                      )}
                    </div>
                  </div>

                  {/* Action Button */}
                  <div className="flex-shrink-0">
                    {step.status === "completed" ? (
                      <Link
                        href={step.link}
                        className="text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300 font-medium text-sm"
                      >
                        ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                      </Link>
                    ) : (
                      <Link
                        href={step.link}
                        className={`px-4 py-2 rounded-lg font-medium text-sm transition-colors ${
                          step.status === "pending"
                            ? "bg-blue-500 hover:bg-blue-600 text-white"
                            : "bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-300"
                        }`}
                      >
                        {step.status === "pending" ? "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤" : "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"}
                      </Link>
                    )}
                  </div>
                </div>
              ))}
            </div>

            {/* Help Section */}
            <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
              <div className="flex items-start space-x-3">
                <span className="text-blue-500 text-xl">üí°</span>
                <div>
                  <h4 className="font-semibold text-blue-900 dark:text-blue-100 mb-1">
                    ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠?
                  </h4>
                  <p className="text-sm text-blue-700 dark:text-blue-300 mb-3">
                    ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô
                    ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÑ‡∏î‡πâ
                  </p>
                  <div className="flex space-x-3">
                    <button className="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium text-sm">
                      üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô
                    </button>
                    <button className="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium text-sm">
                      üìñ ‡∏î‡∏π‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
