import type { ShopSettings, ShopSettingsBackendService, ShopSettingsStats } from '@/src/application/services/shop/backend/shop-settings-backend-service';
import { IShopService } from '@/src/application/services/shop/ShopService';
import { getServerContainer } from '@/src/di/server-container';
import type { Logger } from '@/src/domain/interfaces/logger';
import { BaseShopPresenter } from '../BaseShopPresenter';
// Define ViewModel interface
export interface ShopSettingsViewModel {
  settings: ShopSettings | null;
  stats: ShopSettingsStats | null;
  settingsCategories: Array<{
    id: string;
    name: string;
    icon: string;
    description: string;
    settingsCount: number;
  }>;
  validationErrors: string[];
}

// Main Presenter class
export class ShopSettingsPresenter extends BaseShopPresenter {
  constructor(
    logger: Logger,
    shopService: IShopService,
    private readonly shopSettingsBackendService: ShopSettingsBackendService,
  ) {
    super(logger, shopService);
  }

  async getViewModel(shopId: string): Promise<ShopSettingsViewModel> {
    try {
      this.logger.info('ShopSettingsPresenter: Getting view model', { shopId });

      // Get settings and stats
      const [settings, stats] = await Promise.all([
        this.shopSettingsBackendService.getShopSettings(shopId),
        this.shopSettingsBackendService.getSettingsStats(shopId).catch(() => null)
      ]);

      // Define settings categories
      const settingsCategories = [
        {
          id: 'basic',
          name: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô',
          icon: 'üè™',
          description: '‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
          settingsCount: 7
        },
        {
          id: 'hours',
          name: '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£',
          icon: 'üïê',
          description: '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î ‡πÅ‡∏•‡∏∞‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤',
          settingsCount: 3
        },
        {
          id: 'queue',
          name: '‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏¥‡∏ß',
          icon: 'üé´',
          description: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤',
          settingsCount: 5
        },
        {
          id: 'points',
          name: '‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ï‡πâ‡∏°',
          icon: 'üéÅ',
          description: '‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏° ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô',
          settingsCount: 4
        },
        {
          id: 'notifications',
          name: '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
          icon: 'üì±',
          description: 'SMS Email LINE Notify',
          settingsCount: 4
        },
        {
          id: 'payments',
          name: '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
          icon: 'üí≥',
          description: '‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö',
          settingsCount: 5
        },
        {
          id: 'display',
          name: '‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•',
          icon: 'üé®',
          description: '‡∏ò‡∏µ‡∏° ‡∏†‡∏≤‡∏©‡∏≤ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
          settingsCount: 5
        },
        {
          id: 'advanced',
          name: '‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
          icon: '‚öôÔ∏è',
          description: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
          settingsCount: 5
        }
      ];

      return {
        settings,
        stats,
        settingsCategories,
        validationErrors: [],
      };
    } catch (error) {
      this.logger.error('ShopSettingsPresenter: Error getting view model', error);
      throw error;
    }
  }

  // Metadata generation
  async generateMetadata(shopId: string) {
    return this.generateShopMetadata(
      shopId,
      '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô',
      '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏ô ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏¥‡∏ß ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ',
    );
  }
}

// Factory class
export class ShopSettingsPresenterFactory {
  static async create(): Promise<ShopSettingsPresenter> {
    const serverContainer = await getServerContainer();
    const logger = serverContainer.resolve<Logger>('Logger');
    const shopSettingsBackendService = serverContainer.resolve<ShopSettingsBackendService>('ShopSettingsBackendService');
    const shopService = serverContainer.resolve<IShopService>('ShopService');
    return new ShopSettingsPresenter(logger, shopService, shopSettingsBackendService);
  }
}
