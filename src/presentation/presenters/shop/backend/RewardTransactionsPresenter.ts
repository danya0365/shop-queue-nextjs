import { IAuthService } from '@/src/application/interfaces/auth-service.interface';
import { IProfileService } from '@/src/application/interfaces/profile-service.interface';
import type { RewardTransaction, RewardTransactionBackendService, RewardTransactionFilters, RewardTransactionStats } from '@/src/application/services/shop/backend/reward-transactions-backend-service';
import { IShopService } from '@/src/application/services/shop/ShopService';
import { ISubscriptionService } from '@/src/application/services/subscription/SubscriptionService';
import { getServerContainer } from '@/src/di/server-container';
import type { Logger } from '@/src/domain/interfaces/logger';
import type { Metadata } from 'next';
import { BaseShopBackendPresenter } from './BaseShopBackendPresenter';

export interface RewardTransactionsViewModel {
  transactions: RewardTransaction[];
  stats: RewardTransactionStats;
  statusOptions: StatusOption[];
  typeOptions: TypeOption[];
  filters: RewardTransactionFilters;
}

export interface StatusOption {
  value: string;
  label: string;
  color: string;
  description: string;
}

export interface TypeOption {
  value: string;
  label: string;
  icon: string;
  description: string;
}

export class RewardTransactionsPresenter extends BaseShopBackendPresenter {
  constructor(
    logger: Logger,
    shopService: IShopService,
    authService: IAuthService,
    profileService: IProfileService,
    subscriptionService: ISubscriptionService,
    private readonly rewardTransactionService: RewardTransactionBackendService,
  ) {
    super(logger, shopService, authService, profileService, subscriptionService);
  }

  async getViewModel(shopId: string, filters?: RewardTransactionFilters): Promise<RewardTransactionsViewModel> {
    this.logger.info('RewardTransactionsPresenter: Getting view model', { shopId, filters });

    try {
      const [transactions, stats] = await Promise.all([
        this.rewardTransactionService.getRewardTransactions(shopId, filters),
        this.rewardTransactionService.getRewardTransactionStats(shopId, filters),
      ]);

      const statusOptions = this.getStatusOptions();
      const typeOptions = this.getTypeOptions();

      this.logger.info('RewardTransactionsPresenter: View model created', {
        shopId,
        transactionsCount: transactions.length,
        totalTransactions: stats.totalTransactions,
        totalPointsUsed: stats.totalPointsUsed,
      });

      return {
        transactions,
        stats,
        statusOptions,
        typeOptions,
        filters: filters || {},
      };
    } catch (error) {
      this.logger.error('RewardTransactionsPresenter: Error getting view model', {
        shopId,
        filters,
        error: error instanceof Error ? error.message : 'Unknown error',
      });
      throw error;
    }
  }

  private getStatusOptions(): StatusOption[] {
    return [
      {
        value: 'pending',
        label: '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
        color: 'yellow',
        description: '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà',
      },
      {
        value: 'approved',
        label: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
        color: 'blue',
        description: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ä‡πâ',
      },
      {
        value: 'redeemed',
        label: '‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß',
        color: 'green',
        description: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß',
      },
      {
        value: 'expired',
        label: '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
        color: 'gray',
        description: '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ',
      },
      {
        value: 'cancelled',
        label: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        color: 'red',
        description: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
      },
    ];
  }

  private getTypeOptions(): TypeOption[] {
    return [
      {
        value: 'discount_percentage',
        label: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå',
        icon: 'üìä',
        description: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
      },
      {
        value: 'discount_amount',
        label: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
        icon: 'üí∞',
        description: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà',
      },
      {
        value: 'free_service',
        label: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ü‡∏£‡∏µ',
        icon: 'üéÅ',
        description: '‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ü‡∏£‡∏µ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
      },
      {
        value: 'gift_item',
        label: '‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç',
        icon: 'üéÄ',
        description: '‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ü‡∏£‡∏µ',
      },
      {
        value: 'points_multiplier',
        label: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°',
        icon: '‚≠ê',
        description: '‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤',
      },
    ];
  }

  async generateMetadata(shopId: string): Promise<Metadata> {
    return this.generateShopMetadata(
      shopId,
      '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
      '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î',
    );
  }
}

// Factory class
export class RewardTransactionsPresenterFactory {
  static async create(): Promise<RewardTransactionsPresenter> {
    const serverContainer = await getServerContainer();
    const logger = serverContainer.resolve<Logger>('Logger');
    const rewardTransactionService = serverContainer.resolve<RewardTransactionBackendService>('RewardTransactionBackendService');
    const shopService = serverContainer.resolve<IShopService>('ShopService');
    const authService = serverContainer.resolve<IAuthService>('AuthService');
    const profileService = serverContainer.resolve<IProfileService>('ProfileService');
    const subscriptionService = serverContainer.resolve<ISubscriptionService>('SubscriptionService');
    return new RewardTransactionsPresenter(logger, shopService, authService, profileService, subscriptionService, rewardTransactionService);
  }
}

