import { IAuthService } from '@/src/application/interfaces/auth-service.interface';
import { IProfileService } from '@/src/application/interfaces/profile-service.interface';
import type { NotificationSettings, NotificationSettingsBackendService, NotificationStats, NotificationTemplate } from '@/src/application/services/shop/backend/notification-settings-backend-service';
import { IShopService } from '@/src/application/services/shop/ShopService';
import { ISubscriptionService } from '@/src/application/services/subscription/SubscriptionService';
import { getServerContainer } from '@/src/di/server-container';
import type { Logger } from '@/src/domain/interfaces/logger';
import type { Metadata } from 'next';
import { BaseShopBackendPresenter } from './BaseShopBackendPresenter';

export interface NotificationSettingsViewModel {
  settings: NotificationSettings | null;
  templates: NotificationTemplate[];
  stats: NotificationStats;
  categories: NotificationCategory[];
  providerOptions: ProviderOption[];
  eventOptions: EventOption[];
  variableOptions: VariableOption[];
}

export interface NotificationCategory {
  id: string;
  name: string;
  icon: string;
  description: string;
  enabled: boolean;
  settingsCount: number;
}

export interface ProviderOption {
  value: string;
  label: string;
  description: string;
  isRecommended?: boolean;
}

export interface EventOption {
  value: string;
  label: string;
  description: string;
  defaultEnabled: boolean;
}

export interface VariableOption {
  name: string;
  description: string;
  example: string;
  category: string;
}

export class NotificationSettingsPresenter extends BaseShopBackendPresenter {
  constructor(
    logger: Logger,
    shopService: IShopService,
    authService: IAuthService,
    profileService: IProfileService,
    subscriptionService: ISubscriptionService,
    private readonly notificationSettingsService: NotificationSettingsBackendService,
  ) {
    super(logger, shopService, authService, profileService, subscriptionService);
  }

  async getViewModel(shopId: string): Promise<NotificationSettingsViewModel> {
    this.logger.info('NotificationSettingsPresenter: Getting view model', { shopId });

    try {
      const [settings, templates, stats] = await Promise.all([
        this.notificationSettingsService.getNotificationSettings(shopId),
        this.notificationSettingsService.getNotificationTemplates(shopId),
        this.notificationSettingsService.getNotificationStats(shopId),
      ]);

      const categories = this.getNotificationCategories(settings);
      const providerOptions = this.getProviderOptions();
      const eventOptions = this.getEventOptions();
      const variableOptions = this.getVariableOptions();

      this.logger.info('NotificationSettingsPresenter: View model created', {
        shopId,
        hasSettings: !!settings,
        templatesCount: templates.length,
        categoriesCount: categories.length,
      });

      return {
        settings,
        templates,
        stats,
        categories,
        providerOptions,
        eventOptions,
        variableOptions,
      };
    } catch (error) {
      this.logger.error('NotificationSettingsPresenter: Error getting view model', {
        shopId,
        error: error instanceof Error ? error.message : 'Unknown error',
      });
      throw error;
    }
  }

  private getNotificationCategories(settings: NotificationSettings | null): NotificationCategory[] {
    return [
      {
        id: 'sms',
        name: 'SMS',
        icon: 'üì±',
        description: '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SMS',
        enabled: settings?.smsEnabled ?? false,
        settingsCount: 6,
      },
      {
        id: 'email',
        name: 'Email',
        icon: 'üìß',
        description: '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•',
        enabled: settings?.emailEnabled ?? false,
        settingsCount: 8,
      },
      {
        id: 'line',
        name: 'LINE Notify',
        icon: 'üí¨',
        description: '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE Notify',
        enabled: settings?.lineNotifyEnabled ?? false,
        settingsCount: 4,
      },
      {
        id: 'push',
        name: 'Push Notification',
        icon: 'üîî',
        description: '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô',
        enabled: settings?.pushNotificationEnabled ?? false,
        settingsCount: 4,
      },
      {
        id: 'timing',
        name: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤',
        icon: '‚è∞',
        description: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà',
        enabled: true,
        settingsCount: 3,
      },
      {
        id: 'advanced',
        name: '‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
        icon: '‚öôÔ∏è',
        description: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞ Quiet Hours',
        enabled: true,
        settingsCount: 5,
      },
    ];
  }

  private getProviderOptions(): ProviderOption[] {
    return [
      // SMS Providers
      {
        value: 'local_provider',
        label: '‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®',
        description: '‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ SMS ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î',
        isRecommended: true,
      },
      {
        value: 'twilio',
        label: 'Twilio',
        description: '‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ SMS ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏•‡∏Å ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏™‡∏π‡∏á',
      },
      {
        value: 'aws_sns',
        label: 'AWS SNS',
        description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ SMS ‡∏à‡∏≤‡∏Å Amazon Web Services',
      },

      // Email Providers
      {
        value: 'smtp',
        label: 'SMTP Server',
        description: '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SMTP ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô Gmail, Outlook',
        isRecommended: true,
      },
      {
        value: 'sendgrid',
        label: 'SendGrid',
        description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÇ‡∏•‡∏Å ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°',
      },
      {
        value: 'aws_ses',
        label: 'AWS SES',
        description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å Amazon Web Services',
      },
    ];
  }

  private getEventOptions(): EventOption[] {
    return [
      {
        value: 'booking_confirm',
        label: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
        description: '‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
        defaultEnabled: true,
      },
      {
        value: 'booking_reminder',
        label: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢',
        description: '‡∏™‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
        defaultEnabled: true,
      },
      {
        value: 'booking_cancelled',
        label: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
        description: '‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        defaultEnabled: true,
      },
      {
        value: 'queue_ready',
        label: '‡∏Ñ‡∏¥‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°',
        description: '‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        defaultEnabled: false,
      },
      {
        value: 'promotion',
        label: '‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô',
        description: '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£',
        defaultEnabled: false,
      },
    ];
  }

  private getVariableOptions(): VariableOption[] {
    return [
      // Customer Variables
      {
        name: 'customerName',
        description: '‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        example: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
        category: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
      },
      {
        name: 'customerPhone',
        description: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        example: '081-234-5678',
        category: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
      },
      {
        name: 'customerEmail',
        description: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        example: 'customer@email.com',
        category: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
      },

      // Booking Variables
      {
        name: 'bookingDate',
        description: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á',
        example: '15 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2567',
        category: '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
      },
      {
        name: 'bookingTime',
        description: '‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á',
        example: '14:30',
        category: '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
      },
      {
        name: 'bookingId',
        description: '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
        example: 'BK001234',
        category: '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
      },
      {
        name: 'queueNumber',
        description: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß',
        example: 'A001',
        category: '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
      },

      // Service Variables
      {
        name: 'serviceName',
        description: '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
        example: '‡∏ï‡∏±‡∏î‡∏ú‡∏°‡∏ä‡∏≤‡∏¢',
        category: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
      },
      {
        name: 'servicePrice',
        description: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
        example: '300',
        category: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
      },
      {
        name: 'serviceDuration',
        description: '‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
        example: '60 ‡∏ô‡∏≤‡∏ó‡∏µ',
        category: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
      },

      // Shop Variables
      {
        name: 'shopName',
        description: '‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô',
        example: '‡∏£‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏î‡∏ú‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô',
        category: '‡∏£‡πâ‡∏≤‡∏ô',
      },
      {
        name: 'shopPhone',
        description: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏£‡πâ‡∏≤‡∏ô',
        example: '02-123-4567',
        category: '‡∏£‡πâ‡∏≤‡∏ô',
      },
      {
        name: 'shopAddress',
        description: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô',
        example: '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø',
        category: '‡∏£‡πâ‡∏≤‡∏ô',
      },

      // Time Variables
      {
        name: 'minutesLeft',
        description: '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ô‡∏≤‡∏ó‡∏µ)',
        example: '30',
        category: '‡πÄ‡∏ß‡∏•‡∏≤',
      },
      {
        name: 'currentTime',
        description: '‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
        example: '13:45',
        category: '‡πÄ‡∏ß‡∏•‡∏≤',
      },
      {
        name: 'currentDate',
        description: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
        example: '15 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2567',
        category: '‡πÄ‡∏ß‡∏•‡∏≤',
      },
    ];
  }

  async generateMetadata(shopId: string): Promise<Metadata> {
    return this.generateShopMetadata(shopId, '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á SMS, Email, LINE Notify ‡πÅ‡∏•‡∏∞ Push Notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
  }
}

export class NotificationSettingsPresenterFactory {
  static async create(): Promise<NotificationSettingsPresenter> {
    const serverContainer = await getServerContainer();
    const logger = serverContainer.resolve<Logger>('Logger');
    const notificationSettingsService = serverContainer.resolve<NotificationSettingsBackendService>('NotificationSettingsBackendService');
    const shopService = serverContainer.resolve<IShopService>('ShopService');
    const authService = serverContainer.resolve<IAuthService>('AuthService');
    const profileService = serverContainer.resolve<IProfileService>('ProfileService');
    const subscriptionService = serverContainer.resolve<ISubscriptionService>('SubscriptionService');
    return new NotificationSettingsPresenter(logger, shopService, authService, profileService, subscriptionService, notificationSettingsService);
  }
}

