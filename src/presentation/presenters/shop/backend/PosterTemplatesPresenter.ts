import type { PosterTemplate, PosterTemplateBackendService, PosterTemplateFilters, PosterTemplateStats } from '@/src/application/services/shop/backend/poster-templates-backend-service';
import { getServerContainer } from '@/src/di/server-container';
import type { Logger } from '@/src/domain/interfaces/logger';
import type { Metadata } from 'next';
import { BaseShopPresenter } from '../BaseShopPresenter';

export interface PosterTemplatesViewModel {
  templates: PosterTemplate[];
  stats: PosterTemplateStats;
  categoryOptions: CategoryOption[];
  orientationOptions: OrientationOption[];
  difficultyOptions: DifficultyOption[];
  filters: PosterTemplateFilters;
}

export interface CategoryOption {
  value: string;
  label: string;
  icon: string;
  description: string;
  color: string;
}

export interface OrientationOption {
  value: string;
  label: string;
  icon: string;
  description: string;
}

export interface DifficultyOption {
  value: string;
  label: string;
  icon: string;
  description: string;
  color: string;
}

export class PosterTemplatesPresenter extends BaseShopPresenter {
  constructor(
    logger: Logger,
    private readonly posterTemplateService: PosterTemplateBackendService,
  ) {
    super(logger);
  }

  async getViewModel(shopId: string, filters?: PosterTemplateFilters): Promise<PosterTemplatesViewModel> {
    this.logger.info('PosterTemplatesPresenter: Getting view model', { shopId, filters });

    try {
      const [templates, stats] = await Promise.all([
        this.posterTemplateService.getPosterTemplates(shopId, filters),
        this.posterTemplateService.getPosterTemplateStats(shopId, filters),
      ]);

      const categoryOptions = this.getCategoryOptions();
      const orientationOptions = this.getOrientationOptions();
      const difficultyOptions = this.getDifficultyOptions();

      this.logger.info('PosterTemplatesPresenter: View model created', {
        shopId,
        templatesCount: templates.length,
        totalTemplates: stats.totalTemplates,
        activeTemplates: stats.activeTemplates,
      });

      return {
        templates,
        stats,
        categoryOptions,
        orientationOptions,
        difficultyOptions,
        filters: filters || {},
      };
    } catch (error) {
      this.logger.error('PosterTemplatesPresenter: Error getting view model', {
        shopId,
        filters,
        error: error instanceof Error ? error.message : 'Unknown error',
      });
      throw error;
    }
  }

  private getCategoryOptions(): CategoryOption[] {
    return [
      {
        value: 'promotion',
        label: '‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô',
        icon: 'üéØ',
        description: '‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î',
        color: 'red',
      },
      {
        value: 'service',
        label: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
        icon: '‚ú®',
        description: '‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà',
        color: 'blue',
      },
      {
        value: 'announcement',
        label: '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®',
        icon: 'üì¢',
        description: '‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£',
        color: 'yellow',
      },
      {
        value: 'event',
        label: '‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå',
        icon: 'üéâ',
        description: '‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©',
        color: 'purple',
      },
      {
        value: 'seasonal',
        label: '‡∏ï‡∏≤‡∏°‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•',
        icon: 'üéÑ',
        description: '‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ',
        color: 'green',
      },
      {
        value: 'custom',
        label: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á',
        icon: 'üé®',
        description: '‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏≠‡∏á',
        color: 'gray',
      },
    ];
  }

  private getOrientationOptions(): OrientationOption[] {
    return [
      {
        value: 'portrait',
        label: '‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á',
        icon: 'üì±',
        description: '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ü‡∏ô',
      },
      {
        value: 'landscape',
        label: '‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô',
        icon: 'üñ•Ô∏è',
        description: '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå',
      },
      {
        value: 'square',
        label: '‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏à‡∏±‡∏ï‡∏∏‡∏£‡∏±‡∏™',
        icon: '‚¨ú',
        description: '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Instagram ‡πÅ‡∏•‡∏∞‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢',
      },
    ];
  }

  private getDifficultyOptions(): DifficultyOption[] {
    return [
      {
        value: 'beginner',
        label: '‡∏á‡πà‡∏≤‡∏¢',
        icon: 'üü¢',
        description: '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
        color: 'green',
      },
      {
        value: 'intermediate',
        label: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        icon: 'üü°',
        description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á',
        color: 'yellow',
      },
      {
        value: 'advanced',
        label: '‡∏¢‡∏≤‡∏Å',
        icon: 'üî¥',
        description: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á',
        color: 'red',
      },
    ];
  }

  async generateMetadata(shopId: string): Promise<Metadata> {
    return this.generateShopMetadata(
      shopId,
      '‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÇ‡∏õ‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå',
      '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÇ‡∏õ‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÜ',
    );
  }
}

// Factory class
export class PosterTemplatesPresenterFactory {
  static async create(): Promise<PosterTemplatesPresenter> {
    const serverContainer = await getServerContainer();
    const logger = serverContainer.resolve<Logger>('Logger');
    const posterTemplateService = serverContainer.resolve<PosterTemplateBackendService>('PosterTemplateBackendService');
    return new PosterTemplatesPresenter(logger, posterTemplateService);
  }
}
