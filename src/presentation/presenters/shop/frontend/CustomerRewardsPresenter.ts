import { ShopService } from "@/src/application/services/shop/ShopService";
import { getClientContainer } from "@/src/di/client-container";
import { getServerContainer } from "@/src/di/server-container";
import type { Logger } from "@/src/domain/interfaces/logger";
import { getPaginationConfig } from "@/src/infrastructure/config/PaginationConfig";
import { BaseShopPresenter } from "@/src/presentation/presenters/shop/BaseShopPresenter";

// Define interfaces for data structures
export interface CustomerReward {
  id: string;
  name: string;
  description: string;
  type: "discount" | "free_item" | "cashback" | "points";
  value: number;
  pointsCost: number;
  category: string;
  imageUrl?: string;
  expiryDate?: string;
  termsAndConditions: string[];
  isAvailable: boolean;
  isRedeemed: boolean;
  redeemedAt?: string;
}

export interface CustomerPoints {
  currentPoints: number;
  totalEarned: number;
  totalRedeemed: number;
  pointsExpiring: number;
  expiryDate?: string;
  tier: "Bronze" | "Silver" | "Gold" | "Platinum";
  nextTierPoints: number;
  tierBenefits: string[];
}

export interface RewardTransaction {
  id: string;
  type: "earned" | "redeemed" | "expired";
  points: number;
  description: string;
  date: string;
  relatedOrderId?: string;
}

export interface AvailableReward {
  id: string;
  name: string;
  description: string;
  pointsCost: number;
  category: string;
  imageUrl?: string;
  isAvailable: boolean;
  stock?: number;
}

// Filter interfaces
export interface RewardsFilters {
  type: RewardsFilterType;
  category: string;
  status: string;
  dateRange: "all" | "month" | "quarter" | "year" | "custom";
  startDate?: string;
  endDate?: string;
}

// type filter
export type RewardsFilterType =
  | "all"
  | "discount"
  | "free_item"
  | "cashback"
  | "points";

// Pagination interface
export interface Pagination {
  currentPage: number;
  perPage: number;
  totalItems: number;
  totalPages: number;
  hasNext: boolean;
  hasPrev: boolean;
}

// Define ViewModel interface
export interface CustomerRewardsViewModel {
  customerPoints: CustomerPoints;
  customerName: string;

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏° pagination
  availableRewards: {
    data: AvailableReward[]; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    pagination: Pagination;
  };

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏° pagination
  redeemedRewards: {
    data: CustomerReward[]; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    pagination: Pagination;
  };

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° pagination
  rewardTransactions: {
    data: RewardTransaction[]; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    pagination: Pagination;
  };
}

// Main Presenter class
export class CustomerRewardsPresenter extends BaseShopPresenter {
  constructor(logger: Logger, shopService: ShopService) {
    super(logger, shopService);
  }

  async getViewModel(
    shopId: string,
    currentPage: number = 1,
    perPage: number = getPaginationConfig().REWARDS_PER_PAGE || 10,
    filters: RewardsFilters = {
      type: "all",
      category: "all",
      status: "all",
      dateRange: "all",
    }
  ): Promise<CustomerRewardsViewModel> {
    try {
      // Mock data - replace with actual service calls
      const customerPoints = this.getCustomerPoints();
      const allAvailableRewards = this.getAvailableRewards();
      const allRedeemedRewards = this.getRedeemedRewards();
      const allRewardTransactions = this.getRewardTransactions();

      // Apply filters
      const filteredAvailableRewards = this.applyFilters(
        allAvailableRewards,
        filters
      ) as AvailableReward[];
      const filteredRedeemedRewards = this.applyFilters(
        allRedeemedRewards,
        filters
      ) as CustomerReward[];
      const filteredRewardTransactions = this.applyTransactionFilters(
        allRewardTransactions,
        filters
      );

      // Apply pagination for each data type separately
      const availableRewardsData = this.applyPagination(
        filteredAvailableRewards,
        currentPage,
        perPage
      ) as AvailableReward[];
      const redeemedRewardsData = this.applyPagination(
        filteredRedeemedRewards,
        currentPage,
        perPage
      ) as CustomerReward[];
      const rewardTransactionsData = this.applyPagination(
        filteredRewardTransactions,
        currentPage,
        perPage
      );

      // Calculate pagination info for each data type
      const availableRewardsPagination = this.calculatePagination(
        filteredAvailableRewards.length,
        currentPage,
        perPage
      );
      const redeemedRewardsPagination = this.calculatePagination(
        filteredRedeemedRewards.length,
        currentPage,
        perPage
      );
      const rewardTransactionsPagination = this.calculatePagination(
        filteredRewardTransactions.length,
        currentPage,
        perPage
      );

      return {
        customerPoints,
        customerName: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡∏µ",
        availableRewards: {
          data: availableRewardsData,
          pagination: availableRewardsPagination,
        },
        redeemedRewards: {
          data: redeemedRewardsData,
          pagination: redeemedRewardsPagination,
        },
        rewardTransactions: {
          data: rewardTransactionsData,
          pagination: rewardTransactionsPagination,
        },
      };
    } catch (error) {
      this.logger.error(
        "CustomerRewardsPresenter: Error getting view model",
        error
      );
      throw error;
    }
  }

  // Private methods for data preparation
  private getCustomerPoints(): CustomerPoints {
    return {
      currentPoints: 1250,
      totalEarned: 3450,
      totalRedeemed: 2200,
      pointsExpiring: 150,
      expiryDate: "2024-03-15",
      tier: "Silver",
      nextTierPoints: 750,
      tierBenefits: [
        "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 5% ‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠",
        "‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° 1.5 ‡πÄ‡∏ó‡πà‡∏≤",
        "‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©",
        "‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏î‡πâ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
      ],
    };
  }

  private getAvailableRewards(): AvailableReward[] {
    return [
      {
        id: "1",
        name: "‡∏Å‡∏≤‡πÅ‡∏ü‡∏ü‡∏£‡∏µ 1 ‡πÅ‡∏Å‡πâ‡∏ß",
        description: "‡∏Å‡∏≤‡πÅ‡∏ü‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ 1 ‡πÅ‡∏Å‡πâ‡∏ß (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©)",
        pointsCost: 500,
        category: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°",
        imageUrl: "‚òï",
        isAvailable: true,
        stock: 50,
      },
      {
        id: "2",
        name: "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10%",
        description: "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100 ‡∏ö‡∏≤‡∏ó)",
        pointsCost: 300,
        category: "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î",
        imageUrl: "üé´",
        isAvailable: true,
      },
      {
        id: "3",
        name: "‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡∏î",
        description: "‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡∏î 1 ‡∏ä‡∏¥‡πâ‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏Ñ‡πâ‡∏Å‡∏û‡∏¥‡πÄ‡∏®‡∏©)",
        pointsCost: 800,
        category: "‡∏Ç‡∏ô‡∏°",
        imageUrl: "üç∞",
        isAvailable: true,
        stock: 20,
      },
      {
        id: "4",
        name: "‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏©",
        description: "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô)",
        pointsCost: 200,
        category: "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©",
        imageUrl: "‚ö°",
        isAvailable: true,
      },
      {
        id: "5",
        name: "‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤",
        description: "‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡πÅ‡∏ã‡∏ô‡∏î‡πå‡∏ß‡∏¥‡∏ä + ‡∏Å‡∏≤‡πÅ‡∏ü)",
        pointsCost: 1200,
        category: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        imageUrl: "ü•™",
        isAvailable: false,
        stock: 0,
      },
      {
        id: "6",
        name: "‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô 50 ‡∏ö‡∏≤‡∏ó",
        description: "‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô 50 ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
        pointsCost: 1000,
        category: "‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô",
        imageUrl: "üí∞",
        isAvailable: true,
      },
    ];
  }

  private getRedeemedRewards(): CustomerReward[] {
    return [
      {
        id: "1",
        name: "‡∏Å‡∏≤‡πÅ‡∏ü‡∏ü‡∏£‡∏µ 1 ‡πÅ‡∏Å‡πâ‡∏ß",
        description: "‡∏Å‡∏≤‡πÅ‡∏ü‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ 1 ‡πÅ‡∏Å‡πâ‡∏ß",
        type: "free_item",
        value: 65,
        pointsCost: 500,
        category: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°",
        imageUrl: "‚òï",
        termsAndConditions: [
          "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô",
          "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÑ‡∏î‡πâ",
          "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏Å",
        ],
        isAvailable: true,
        isRedeemed: true,
        redeemedAt: "2024-01-10",
        expiryDate: "2024-02-10",
      },
      {
        id: "2",
        name: "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10%",
        description: "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
        type: "discount",
        value: 10,
        pointsCost: 300,
        category: "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î",
        imageUrl: "üé´",
        termsAndConditions: [
          "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ß‡∏±‡∏ô",
          "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100 ‡∏ö‡∏≤‡∏ó",
          "‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß",
        ],
        isAvailable: false,
        isRedeemed: true,
        redeemedAt: "2024-01-05",
        expiryDate: "2024-01-20",
      },
    ];
  }

  private getRewardTransactions(): RewardTransaction[] {
    return [
      {
        id: "1",
        type: "earned",
        points: 85,
        description: "‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏≤‡πÅ‡∏ü‡∏•‡∏≤‡πÄ‡∏ï‡πâ + ‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï",
        date: "2024-01-15",
        relatedOrderId: "ORD-001",
      },
      {
        id: "2",
        type: "redeemed",
        points: -500,
        description: "‡πÅ‡∏•‡∏Å‡∏Å‡∏≤‡πÅ‡∏ü‡∏ü‡∏£‡∏µ 1 ‡πÅ‡∏Å‡πâ‡∏ß",
        date: "2024-01-10",
      },
      {
        id: "3",
        type: "earned",
        points: 65,
        description: "‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏≤‡πÅ‡∏ü‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà 2 ‡πÅ‡∏Å‡πâ‡∏ß",
        date: "2024-01-12",
        relatedOrderId: "ORD-002",
      },
      {
        id: "4",
        type: "redeemed",
        points: -300,
        description: "‡πÅ‡∏•‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10%",
        date: "2024-01-05",
      },
      {
        id: "5",
        type: "earned",
        points: 120,
        description: "‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤ + ‡∏Å‡∏≤‡πÅ‡∏ü‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà",
        date: "2024-01-08",
        relatedOrderId: "ORD-003",
      },
      {
        id: "6",
        type: "expired",
        points: -50,
        description: "‡πÅ‡∏ï‡πâ‡∏°‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
        date: "2024-01-01",
      },
    ];
  }

  // Action methods
  async redeemReward(shopId: string, rewardId: string): Promise<void> {
    try {
      this.logger.info("CustomerRewardsPresenter: Redeeming reward", {
        shopId,
        rewardId,
      });

      // Mock implementation - replace with actual service call
      // This would typically call a service to process the reward redemption
      console.log(`Redeeming reward ${rewardId} for shop ${shopId}`);

      // In a real implementation, this would:
      // 1. Validate the reward can be redeemed
      // 2. Check if user has enough points
      // 3. Process the redemption
      // 4. Update user's points balance
      // 5. Create a redemption record
    } catch (error) {
      this.logger.error(
        "CustomerRewardsPresenter: Error redeeming reward",
        error
      );
      throw error;
    }
  }

  async getRewardDetails(
    shopId: string,
    rewardId: string
  ): Promise<CustomerReward | AvailableReward> {
    try {
      this.logger.info("CustomerRewardsPresenter: Getting reward details", {
        shopId,
        rewardId,
      });

      // Mock implementation - replace with actual service call
      const allRewards = [
        ...this.getAvailableRewards(),
        ...this.getRedeemedRewards(),
      ];
      const reward = allRewards.find((r) => r.id === rewardId);

      if (!reward) {
        throw new Error("Reward not found");
      }

      return reward;
    } catch (error) {
      this.logger.error(
        "CustomerRewardsPresenter: Error getting reward details",
        error
      );
      throw error;
    }
  }

  // Private helper methods
  private applyFilters(
    rewards: (AvailableReward | CustomerReward)[],
    filters: RewardsFilters
  ): (AvailableReward | CustomerReward)[] {
    return rewards.filter((reward) => {
      // Type filter
      if (
        filters.type !== "all" &&
        "type" in reward &&
        reward.type !== filters.type
      ) {
        return false;
      }

      // Category filter
      if (filters.category !== "all" && reward.category !== filters.category) {
        return false;
      }

      // Status filter (for available rewards)
      if (filters.status !== "all" && "isAvailable" in reward) {
        if (filters.status === "available" && !reward.isAvailable) return false;
        if (filters.status === "unavailable" && reward.isAvailable)
          return false;
      }

      // Status filter (for redeemed rewards)
      if (filters.status !== "all" && "isRedeemed" in reward) {
        if (filters.status === "redeemed" && !reward.isRedeemed) return false;
        if (filters.status === "not_redeemed" && reward.isRedeemed)
          return false;
      }

      return true;
    });
  }

  private applyTransactionFilters(
    transactions: RewardTransaction[],
    filters: RewardsFilters
  ): RewardTransaction[] {
    return transactions.filter((transaction) => {
      // Date range filter
      if (filters.dateRange !== "all") {
        const transactionDate = new Date(transaction.date);
        const now = new Date();

        switch (filters.dateRange) {
          case "month":
            if (
              transactionDate < new Date(now.getFullYear(), now.getMonth(), 1)
            )
              return false;
            break;
          case "quarter":
            const quarterStart = new Date(
              now.getFullYear(),
              Math.floor(now.getMonth() / 3) * 3,
              1
            );
            if (transactionDate < quarterStart) return false;
            break;
          case "year":
            if (transactionDate < new Date(now.getFullYear(), 0, 1))
              return false;
            break;
          case "custom":
            if (
              filters.startDate &&
              transactionDate < new Date(filters.startDate)
            )
              return false;
            if (filters.endDate && transactionDate > new Date(filters.endDate))
              return false;
            break;
        }
      }

      return true;
    });
  }

  private applyPagination<T>(
    items: T[],
    currentPage: number,
    perPage: number
  ): T[] {
    const startIndex = (currentPage - 1) * perPage;
    const endIndex = startIndex + perPage;
    return items.slice(startIndex, endIndex);
  }

  private calculatePagination(
    totalItems: number,
    currentPage: number,
    perPage: number
  ): Pagination {
    const totalPages = Math.ceil(totalItems / perPage);

    return {
      currentPage,
      totalPages,
      perPage,
      totalItems,
      hasNext: currentPage < totalPages,
      hasPrev: currentPage > 1,
    };
  }

  // Metadata generation
  async generateMetadata(shopId: string) {
    return this.generateShopMetadata(
      shopId,
      "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏° - ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
      "‡∏î‡∏π‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏° ‡πÅ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ"
    );
  }
}

// Factory class for server-side
export class CustomerRewardsPresenterFactory {
  static async create(): Promise<CustomerRewardsPresenter> {
    const serverContainer = await getServerContainer();
    const logger = serverContainer.resolve<Logger>("Logger");
    const shopService = serverContainer.resolve<ShopService>("ShopService");
    return new CustomerRewardsPresenter(logger, shopService);
  }
}

// Factory class for client-side
export class ClientCustomerRewardsPresenterFactory {
  static async create(): Promise<CustomerRewardsPresenter> {
    const clientContainer = await getClientContainer();
    const logger = clientContainer.resolve<Logger>("Logger");
    const shopService = clientContainer.resolve<ShopService>("ShopService");
    return new CustomerRewardsPresenter(logger, shopService);
  }
}
