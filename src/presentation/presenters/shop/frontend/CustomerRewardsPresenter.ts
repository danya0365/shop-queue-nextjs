import { getServerContainer } from '@/src/di/server-container';
import type { Logger } from '@/src/domain/interfaces/logger';

// Define interfaces for data structures
export interface CustomerReward {
  id: string;
  name: string;
  description: string;
  type: 'discount' | 'free_item' | 'cashback' | 'points';
  value: number;
  pointsCost: number;
  category: string;
  imageUrl?: string;
  expiryDate?: string;
  termsAndConditions: string[];
  isAvailable: boolean;
  isRedeemed: boolean;
  redeemedAt?: string;
}

export interface CustomerPoints {
  currentPoints: number;
  totalEarned: number;
  totalRedeemed: number;
  pointsExpiring: number;
  expiryDate?: string;
  tier: 'Bronze' | 'Silver' | 'Gold' | 'Platinum';
  nextTierPoints: number;
  tierBenefits: string[];
}

export interface RewardTransaction {
  id: string;
  type: 'earned' | 'redeemed' | 'expired';
  points: number;
  description: string;
  date: string;
  relatedOrderId?: string;
}

export interface AvailableReward {
  id: string;
  name: string;
  description: string;
  pointsCost: number;
  category: string;
  imageUrl?: string;
  isAvailable: boolean;
  stock?: number;
}

// Define ViewModel interface
export interface CustomerRewardsViewModel {
  customerPoints: CustomerPoints;
  availableRewards: AvailableReward[];
  redeemedRewards: CustomerReward[];
  rewardTransactions: RewardTransaction[];
  customerName: string;
}

// Main Presenter class
export class CustomerRewardsPresenter {
  constructor(private readonly logger: Logger) {}

  async getViewModel(shopId: string): Promise<CustomerRewardsViewModel> {
    try {
      this.logger.info('CustomerRewardsPresenter: Getting view model for shop', { shopId });
      
      // Mock data - replace with actual service calls
      const customerPoints = this.getCustomerPoints();
      const availableRewards = this.getAvailableRewards();
      const redeemedRewards = this.getRedeemedRewards();
      const rewardTransactions = this.getRewardTransactions();
      
      return {
        customerPoints,
        availableRewards,
        redeemedRewards,
        rewardTransactions,
        customerName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡∏µ',
      };
    } catch (error) {
      this.logger.error('CustomerRewardsPresenter: Error getting view model', error);
      throw error;
    }
  }

  // Private methods for data preparation
  private getCustomerPoints(): CustomerPoints {
    return {
      currentPoints: 1250,
      totalEarned: 3450,
      totalRedeemed: 2200,
      pointsExpiring: 150,
      expiryDate: '2024-03-15',
      tier: 'Silver',
      nextTierPoints: 750,
      tierBenefits: [
        '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 5% ‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠',
        '‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° 1.5 ‡πÄ‡∏ó‡πà‡∏≤',
        '‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©',
        '‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏î‡πâ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
      ],
    };
  }

  private getAvailableRewards(): AvailableReward[] {
    return [
      {
        id: '1',
        name: '‡∏Å‡∏≤‡πÅ‡∏ü‡∏ü‡∏£‡∏µ 1 ‡πÅ‡∏Å‡πâ‡∏ß',
        description: '‡∏Å‡∏≤‡πÅ‡∏ü‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ 1 ‡πÅ‡∏Å‡πâ‡∏ß (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©)',
        pointsCost: 500,
        category: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°',
        imageUrl: '‚òï',
        isAvailable: true,
        stock: 50,
      },
      {
        id: '2',
        name: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10%',
        description: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100 ‡∏ö‡∏≤‡∏ó)',
        pointsCost: 300,
        category: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î',
        imageUrl: 'üé´',
        isAvailable: true,
      },
      {
        id: '3',
        name: '‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡∏î',
        description: '‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡∏î 1 ‡∏ä‡∏¥‡πâ‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏Ñ‡πâ‡∏Å‡∏û‡∏¥‡πÄ‡∏®‡∏©)',
        pointsCost: 800,
        category: '‡∏Ç‡∏ô‡∏°',
        imageUrl: 'üç∞',
        isAvailable: true,
        stock: 20,
      },
      {
        id: '4',
        name: '‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏©',
        description: '‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô)',
        pointsCost: 200,
        category: '‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©',
        imageUrl: '‚ö°',
        isAvailable: true,
      },
      {
        id: '5',
        name: '‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤',
        description: '‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡πÅ‡∏ã‡∏ô‡∏î‡πå‡∏ß‡∏¥‡∏ä + ‡∏Å‡∏≤‡πÅ‡∏ü)',
        pointsCost: 1200,
        category: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
        imageUrl: 'ü•™',
        isAvailable: false,
        stock: 0,
      },
      {
        id: '6',
        name: '‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô 50 ‡∏ö‡∏≤‡∏ó',
        description: '‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô 50 ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
        pointsCost: 1000,
        category: '‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô',
        imageUrl: 'üí∞',
        isAvailable: true,
      },
    ];
  }

  private getRedeemedRewards(): CustomerReward[] {
    return [
      {
        id: '1',
        name: '‡∏Å‡∏≤‡πÅ‡∏ü‡∏ü‡∏£‡∏µ 1 ‡πÅ‡∏Å‡πâ‡∏ß',
        description: '‡∏Å‡∏≤‡πÅ‡∏ü‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ 1 ‡πÅ‡∏Å‡πâ‡∏ß',
        type: 'free_item',
        value: 65,
        pointsCost: 500,
        category: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°',
        imageUrl: '‚òï',
        termsAndConditions: [
          '‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô',
          '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÑ‡∏î‡πâ',
          '‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏Å',
        ],
        isAvailable: true,
        isRedeemed: true,
        redeemedAt: '2024-01-10',
        expiryDate: '2024-02-10',
      },
      {
        id: '2',
        name: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10%',
        description: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
        type: 'discount',
        value: 10,
        pointsCost: 300,
        category: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î',
        imageUrl: 'üé´',
        termsAndConditions: [
          '‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ß‡∏±‡∏ô',
          '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100 ‡∏ö‡∏≤‡∏ó',
          '‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
        ],
        isAvailable: false,
        isRedeemed: true,
        redeemedAt: '2024-01-05',
        expiryDate: '2024-01-20',
      },
    ];
  }

  private getRewardTransactions(): RewardTransaction[] {
    return [
      {
        id: '1',
        type: 'earned',
        points: 85,
        description: '‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏≤‡πÅ‡∏ü‡∏•‡∏≤‡πÄ‡∏ï‡πâ + ‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï',
        date: '2024-01-15',
        relatedOrderId: 'ORD-001',
      },
      {
        id: '2',
        type: 'redeemed',
        points: -500,
        description: '‡πÅ‡∏•‡∏Å‡∏Å‡∏≤‡πÅ‡∏ü‡∏ü‡∏£‡∏µ 1 ‡πÅ‡∏Å‡πâ‡∏ß',
        date: '2024-01-10',
      },
      {
        id: '3',
        type: 'earned',
        points: 65,
        description: '‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏≤‡πÅ‡∏ü‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÇ‡∏ô‡πà 2 ‡πÅ‡∏Å‡πâ‡∏ß',
        date: '2024-01-12',
        relatedOrderId: 'ORD-002',
      },
      {
        id: '4',
        type: 'redeemed',
        points: -300,
        description: '‡πÅ‡∏•‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10%',
        date: '2024-01-05',
      },
      {
        id: '5',
        type: 'earned',
        points: 120,
        description: '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤ + ‡∏Å‡∏≤‡πÅ‡∏ü‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô‡πà',
        date: '2024-01-08',
        relatedOrderId: 'ORD-003',
      },
      {
        id: '6',
        type: 'expired',
        points: -50,
        description: '‡πÅ‡∏ï‡πâ‡∏°‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
        date: '2024-01-01',
      },
    ];
  }

  // Metadata generation
  generateMetadata() {
    return {
      title: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏° - ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ | Shop Queue',
      description: '‡∏î‡∏π‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏° ‡πÅ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ',
    };
  }
}

// Factory class
export class CustomerRewardsPresenterFactory {
  static async create(): Promise<CustomerRewardsPresenter> {
    const serverContainer = await getServerContainer();
    const logger = serverContainer.resolve<Logger>('Logger');
    return new CustomerRewardsPresenter(logger);
  }
}
